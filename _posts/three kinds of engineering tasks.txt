## The three kinds of Engineering Tasks

"I'm just not feeling a ton of satisfaction from the work I'm doing," I said, sitting down my engineering manager a few months ago. "It all feels kind of pointless and one-off; the approach feels wrong but I can't quite put my finger on it."

I went through my past two weeks worth of commits to try to find a pattern. Here's what I found (spoiler: it helped).

### The three kinds of tasks that Software Engineers do.

#### Type 1: Product Engineering.
Adding a new user-facing feature, fixing a bug, building a landing page or instrumenting an experiment are all projects that help the users (or the business) directly. 
  

#### Type 2: Platform Engineering
Building Admin UI, instrumenting analytics, and implementing 3rd-party solutions to replace one-off engineering tasks are all examples of projects that empower non-technical company stakeholders to deliver value without requiring engineering one-off tasks. 

They don't add value to the business or the company directly, but they free up engineering resources and create force-multipliers for others at the company.

#### Type 3: Infrastructure Engineering 
Cleaning up technical debt, creating re-usable front-end components, building frameworks and improving the build are all examples of projects that increase engineering velocity. 

These don't add value directly or even indirectly via stake-holders, but they empower engineers in the same way that Type 2 tasks empower non-technical employees.

If type 1 tasks give a man a fish, type 2 tasks teach a man to fish and type 3 tasks create wiki-hows for running your own fishing bootcamp.

### So what?
My recent tasks included fixing email copy and adding a new person to our lead allocation flow. These were tasks that didn't feel like they should be done by engineering. In the parlance above, these were type 1 tasks that felt like they deserved a type 2 solution. It had been bumming me out.

### Ideas for Engineers
- What kind of projects do you most enjoy, and what would an ideal breakdown between type 1/2/3 tasks would you want to work on in an ideal week, at this point in your career? Be honest with your manager or potential employer about where you want to be and you're more likely to be happy.
- If you feel there's an easy type-2 or type-3 solution toa a type-1 problem, bring it up to think through whether the time is right.
- If you can't justify a task as type 1, 2, or 3, the task is _by definition_ not creating value, directly or indirectly, and therefore likely not worthwhile in its current formulation.

### Ideas for engineering leadership
#### Always be rebalancing 
As your company and your team grow, the optimal breakdown of how much to work on platforms and infrastructure will change over time. As you look at high-level goals, ask (and encourage your team to ask) whether type-1 tasks should be solved as a type-2 solution, whether some type-2 solutions could be punted into type-1, and whether you're neglecting type-3 pain points.

#### Product can't feel the tech debt.
Type-1 and Type-2 tasks have clearly visible and valuable deliverables and get positive reinforcement. Type-3 tasks are valued inside of engineering but otherwise thankless; however, they can be incredibly valuable to the business in the medium and long term. Celebrating type-3 progress (and advocating for it with your business counterpart) therefore falls to you.

------------------------
Outline/Notes

Anything you do at work as an engineer can be seen as one of three agendas.

1.  Product Engineering.

Working on a thing that will directly bring value to the user (or the company).  
Examples: new feature, user-facing bugfix, new landing page, new experiment

Nice thing: clear to see how you are delivering value.

2. Platform Engineering

Building things that empower non-technical employees to deliver value.

Examples: Admin UIs, Data/Analytics Implementation, migrating frequent requests into tools, 3rd party implementations (landing pages, emails, experiments, CRMs)

Nice thing: non-technical people are grateful for value delivered, like being empowered.

3. Infrastructure Engineering

Building things that empower technical employees to deliver value more effectively.

Examples: Cleaning up technical debt, styleguide, UI components, build improvements, shared tooling/frameworks.

Pain point: If you report into product org, value of infra work not directly experienced except engineers seem faster/happier.


----
1/2/3 deliver value increasingly indirectly; (2) is like first derivative of value, (3) is 2nd derivative.

Why is this interesting?
Worth thinking about to avoid falling into all sorts of traps.

1. Over-indexed on (1): Product Eng is key and critical to the company, but if you only do that eventually engineering gets overwhelmed with code debt and frequent trivial asks of accidental complexity.

Addressed by eng leadership working with product to find a balance.

2. Over-indexed on (2): Engineers with a low tolerance for menial requests may try to "make everything into a tool." Sometimes good but you have to make sure you're not doing extra needless work.

3. Over-indexed on (3): When all you have is a hammer, everything looks like a nail. Worth fixing but not at the cost of product market fit (IE, don't polish your glasses when the bar is on fire).

2/3 are addressed by "startup mentality"

## Shit tasks
- a task that doesn't fit into 1/2/3 isn't worth doing.
- if you're doing a lot of crappy one-off tasks, you're under-indexed on (2).


## feeling burnt out?
- it could be because you prefer on working on a different mix of  1/2/3 tasks and should be on a team with a different mix.
- it could be because your team is over/under attempting between the categories and it's a hard case to make.
- sometimes a (1) could have been a (2) for free.

## Why is this a worthwhile doc? 
- because sometimes you need to make the case to mgmt and it's not easy, and now you have a link.
- sometimes you're annoyed by something and you can't quite explain it.